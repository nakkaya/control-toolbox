package com.nakkaya.filter.kalman;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.ShortByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /usr/local/Cellar/opencv/2.4.9/include/opencv2/core/types_c.h:219</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CvMat extends Structure {
	public int type;
	public int step;
	/** C type : int* */
	public IntByReference refcount;
	public int hdr_refcount;
	/** C type : data_union */
	public data_union data;
	/** C type : field1_union */
	public field1_union field1;
	/** C type : field2_union */
	public field2_union field2;
	/** <i>native declaration : /usr/local/Cellar/opencv/2.4.9/include/opencv2/core/types_c.h:210</i> */
	public static class data_union extends Union {
		/** C type : uchar* */
		public Pointer ptr;
		/** C type : short* */
		public ShortByReference s;
		/** C type : int* */
		public IntByReference i;
		/** C type : float* */
		public FloatByReference fl;
		/** C type : double* */
		public DoubleByReference db;
		public data_union() {
			super();
		}
		/** @param ptr C type : uchar* */
		public data_union(Pointer ptr) {
			super();
			this.ptr = ptr;
			setType(Pointer.class);
		}
		/** @param s C type : short* */
		public data_union(ShortByReference s) {
			super();
			this.s = s;
			setType(ShortByReference.class);
		}
		/** @param i C type : int* */
		public data_union(IntByReference i) {
			super();
			this.i = i;
			setType(IntByReference.class);
		}
		/** @param fl C type : float* */
		public data_union(FloatByReference fl) {
			super();
			this.fl = fl;
			setType(FloatByReference.class);
		}
		/** @param db C type : double* */
		public data_union(DoubleByReference db) {
			super();
			this.db = db;
			setType(DoubleByReference.class);
		}
		public static class ByReference extends data_union implements Structure.ByReference {
			
		};
		public static class ByValue extends data_union implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : /usr/local/Cellar/opencv/2.4.9/include/opencv2/core/types_c.h:214</i> */
	public static class field1_union extends Union {
		public int rows;
		public int height;
		public field1_union() {
			super();
		}
		public field1_union(int rows_or_height) {
			super();
			this.height = this.rows = rows_or_height;
			setType(Integer.TYPE);
		}
		public field1_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field1_union implements Structure.ByReference {
			
		};
		public static class ByValue extends field1_union implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : /usr/local/Cellar/opencv/2.4.9/include/opencv2/core/types_c.h:218</i> */
	public static class field2_union extends Union {
		public int cols;
		public int width;
		public field2_union() {
			super();
		}
		public field2_union(int cols_or_width) {
			super();
			this.width = this.cols = cols_or_width;
			setType(Integer.TYPE);
		}
		public field2_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field2_union implements Structure.ByReference {
			
		};
		public static class ByValue extends field2_union implements Structure.ByValue {
			
		};
	};
	public CvMat() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("type", "step", "refcount", "hdr_refcount", "data", "field1", "field2");
	}
	/**
	 * @param refcount C type : int*<br>
	 * @param data C type : data_union<br>
	 * @param field1 C type : field1_union<br>
	 * @param field2 C type : field2_union
	 */
	public CvMat(int type, int step, IntByReference refcount, int hdr_refcount, data_union data, field1_union field1, field2_union field2) {
		super();
		this.type = type;
		this.step = step;
		this.refcount = refcount;
		this.hdr_refcount = hdr_refcount;
		this.data = data;
		this.field1 = field1;
		this.field2 = field2;
	}
	public CvMat(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CvMat implements Structure.ByReference {
		
	};
	public static class ByValue extends CvMat implements Structure.ByValue {
		
	};
}
